#!/usr/bin/env ruby -s
require 'rubygems'
$:.unshift(File.join(File.dirname(__FILE__), "..", 'lib'))
require 'rdf_context'
require 'spec/rdfa_helper'
require 'getoptlong'

def rdfa_tc(number, parse, store)
  f = File.expand_path("#{TEST_DIR}/#{number}.txt")
  found_head = false
  namespaces = ""
  body = File.readlines(f).map do |line|
    found_head ||= line.match(/<head/)
    if found_head
      line.chop
    else
      namespaces << line
      nil
    end
  end.compact.join("\n")

  namespaces.chop!  # Remove trailing newline
  
  tcpath = BASE_TEST_CASE_URL + "xhtml1"
  
  head = "" +
  %(<?xml version="1.0" encoding="UTF-8"?>\n) +
  %(<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML+RDFa 1.0//EN" "http://www.w3.org/MarkUp/DTD/xhtml-rdfa-1.dtd">\n) +
  %(<html xmlns="http://www.w3.org/1999/xhtml" version="XHTML+RDFa #{$rdfa_version}"\n)
  tc = head + "#{namespaces}>\n#{body.gsub(/\$TCPATH/, tcpath)}\n</html>"
  
  puts "Input file: #{tc}" if $DEBUG || $verbose
  parse.parse(StringIO.new(tc), "#{tcpath}/#{number}.xhtml")
end

def run_tc(tc)
  puts "run #{tc.name}"
  graph = RdfContext::RdfaParser.parse(tc.input, tc.informationResourceInput, :strict => $strict)
  puts graph.serialize(:format => $format.to_sym, :base => tc.informationResourceInput) unless $quiet
end

$verbose = false
$format = :ntriples
$strict = false
suite = "xhtml"
opts = GetoptLong.new(
  ["--debug", GetoptLong::NO_ARGUMENT],
  ["--verbose", GetoptLong::NO_ARGUMENT],
  ["--quiet", GetoptLong::NO_ARGUMENT],
  ["--suite", GetoptLong::OPTIONAL_ARGUMENT],
  ["--strict", GetoptLong::NO_ARGUMENT],
  ["--format", GetoptLong::REQUIRED_ARGUMENT]
)
opts.each do |opt, arg|
  case opt
  when '--verbose' then $verbose = true
  when '--quiet' then $quiet = true
  when '--debug' then $DEBUG = true
  when '--format' then $format = arg
  when '--suite' then suite = arg
  when '--strict' then $strict = true
  end
end

test_cases = RdfaHelper::TestCase.test_cases(suite)

puts test_cases.length

test_cases = test_cases.detect do |tc|
  next unless ARGV.empty? || ARGV.any? {|n| tc.name.match(/#{n}/)}
  run_tc(tc)
end
